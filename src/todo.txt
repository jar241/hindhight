# 프로젝트: 비주얼 트레이딩 저널 MVP

## Phase 1: 디자인 및 기획 구체화 (Design & Planning)

- [x] 1. 최종 UI 디자인 시스템 정립
- [x] 2. '분석 모드' 화면 디자인 (과거 복기)
- [x] 3. '거래 모드' 화면 디자인 (실시간 의사결정)
- [x] 4. 기타 필수 화면 디자인
- [x] 5. 프로토타이핑 및 상호작용 정의

---

## Phase 2: 개발 구현 (Development)

### Step 1: 기본 환경 및 레이아웃 (완료)
- [x] 6. 프론트엔드 기본 환경 설정 (React 프로젝트 생성)
- [x] 6-1. 컴포넌트 파일 구조화 (`App.js`, `Dashboard.js`, `ChartComponent.js`)
- [x] 6-2. 기본 레이아웃 컴포넌트 구조화 (HTML 뼈대)

### Step 2: 핵심 기능 구현 (진행 중)
- [x] 7. 핵심 기능 구현: '분석 모드' (차트 렌더링)
  - [x] 7-1. **(API 연동)** 외부 API(Alpha Vantage)를 통해 주가 데이터를 받아오는 로직 구현
  - [x] 7-2. **(차트 구현)** 받아온 주가 데이터로 기본 라인 차트 렌더링
  - [ ] 7-3. 사용자 거래 데이터(매수/매도)를 차트 위에 **점으로 오버레이**하는 로직 구현
  - [ ] 7-4. 평균 매수가, 최고/최저가 등 계산된 값을 차트 위에 **오버레이**하는 로직 구현
  - [ ] 7-5. 기간 설정 버튼(`1M` ~ `ALL`) 클릭 시, API를 다시 호출하고 차트를 다시 그리는 기능 구현

- [ ] 8. 핵심 기능 구현: '거래 모드' & '물타기 계산기'
  - [ ] 8-1. `1D` 버튼 클릭 시, 분봉 차트 데이터를 요청하고 렌더링하는 기능 구현
  - [ ] 8-2. '물타기 계산기' 모달 컴포넌트 생성 및 디자인 적용
  - [ ] 8-3. 모달 내 입력 값에 따라 실시간으로 예상 결과를 계산하는 로직 구현
  - [ ] 8-4. 계산된 '예상 평균 매수가'를 차트 위에 '미리보기 점선'으로 동적으로 그리는 로직 구현

### Step 3: 디자인 디테일 및 데이터 관리 (다음 할 일)
- [ ] 9. **CSS 디테일 수정 (디자인-구현 불일치 해결)**
  - [ ] 9-1. 전체 폰트, 색상, 간격 등 `Dashboard.css`를 디자인 시안과 100% 일치하도록 조정
  - [ ] 9-2. 차트 옵션 수정: y축 그리드 라인 색상, x축 날짜 포맷, 툴팁 스타일 등 `ChartComponent.js`의 `options` 객체 수정
  - [ ] 9-3. 상단 KPI 정보, 버튼 등 더미 데이터를 실제 데이터(또는 props)로 교체할 준비

- [ ] 10. 데이터 관리 기능 구현
  - [ ] 10-1. 거래 내역 입력/수정 폼(Form) UI 생성
  - [ ] 10-2. CSV 파일 업로드 버튼에 기능 연결 (PapaParse.js 등 라이브러리 활용)

### Step 4: 백엔드 연동 (장기 목표)
- [ ] 11. 백엔드 (최소 기능)
  - [ ] 11-1. 사용자 계정 관리(회원가입/로그인) API 개발
  - [ ] 11-2. 사용자의 거래 내역(CRUD)을 DB에 저장하고 관리하는 API 개발
  - [ ] 11-3. 특정 종목에 대한 거래 내역과 계산된 요약 정보를 전달하는 API 개발


===========
# Chart Time Display Format
- [ ] timeRange에 따른 X축 시간 표시 형식 변경 필요
  - 1M (1개월): 'MM.dd' 형식
  - 3M (3개월): 'MM.dd' 형식
  - 6M (6개월): 'MM.dd' 형식
  - 1Y (1년): 'YY.MM' 형식
  - ALL: 'YY.MM' 형식

## 구현 제안
timeRange prop을 전달할 때 함께 전달하면 좋을 옵션들:
```javascript
{
  timeRange: '1M',
  displayFormat: {
    unit: 'day',        // 'day' | 'month' 등
    format: 'MM.dd'     // 실제 표시될 날짜 형식
  }
}
```

이렇게 하면:
1. ChartComponent는 단순히 전달받은 형식을 사용하면 되므로 책임이 명확해짐
2. 상위 컴포넌트에서 timeRange 변경 시 함께 format도 변경하여 전달
3. 추후 format 변경이 필요할 때 ChartComponent 수정 없이 상위에서 처리 가능
=============